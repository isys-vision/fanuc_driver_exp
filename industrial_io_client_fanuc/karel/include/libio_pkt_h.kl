-- Software License Agreement (BSD License)
--
-- Copyright (c) 2012, 2013, TU Delft Robotics Institute
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
--
--  * Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
--  * Redistributions in binary form must reproduce the above
--    copyright notice, this list of conditions and the following
--    disclaimer in the documentation and/or other materials provided
--    with the distribution.
--  * Neither the name of the TU Delft Robotics Institute nor the names 
--    of its contributors may be used to endorse or promote products 
--    derived from this software without specific prior written 
--    permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-- FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-- COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-- BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-- ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-- POSSIBILITY OF SUCH DAMAGE.



--------------------------------------------------------------------------------
-- 
-- libio shared type / constant decls
-- 
-- author: T.Hoffmann (Ruhrbotics GmbH)
-- 
--------------------------------------------------------------------------------





--------------------------------------------------------------------------------
-- 
-- Serialise the packet. Write bytestream to 'fd'.
-- 
--
-- [in    ]  fd      : file desc to write to
--
-- [return]          :    0 IFF no error
--                     <  0 on any error
-- 
--------------------------------------------------------------------------------
ROUTINE ipktio_d_srl(fd : FILE) : INTEGER FROM libio_pkt 


--------------------------------------------------------------------------------
-- 
-- Checks the number of bytes available in the given file descriptor 'fd', and 
-- deserialises one packet into 'pkt' if there are enough.
-- 
-- [in    ]  fd      : file desc to check
--
--Um die Länge zu bestimmen
-- [in    ]  msg_type_
-- [in    ]  num_items_
--
-- [return]          : < 0 on any error, otherwise number of packets
--                     deserialised (always max 1 in this implementation)
-- 
--------------------------------------------------------------------------------
ROUTINE  rpio_chkbuf(fd : FILE; msg_type_:INTEGER; num_items_ : INTEGER) : INTEGER FROM libio_pkt