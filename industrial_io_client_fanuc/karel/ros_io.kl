 -- Software License Agreement (BSD License)
--
-- Copyright (c) 2012-2014, TU Delft Robotics Institute
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
--
--  * Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
--  * Redistributions in binary form must reproduce the above
--    copyright notice, this list of conditions and the following
--    disclaimer in the documentation and/or other materials provided
--    with the distribution.
--  * Neither the name of the TU Delft Robotics Institute nor the names 
--    of its contributors may be used to endorse or promote products 
--    derived from this software without specific prior written 
--    permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-- FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-- COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-- BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-- ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-- POSSIBILITY OF SUCH DAMAGE.


PROGRAM ros_io
--------------------------------------------------------------------------------
-- 
-- ROS-Industrial io relay.
-- 
-- Currently only supports joint trajectory point streaming.
-- 
-- 
-- 
-- 
-- 
-- author: M. Leske, Ruhrbotics
-- 
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'r23'
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR





--------------------------------------------------------------------------------
-- 
-- remote types & constants
-- 
--------------------------------------------------------------------------------
%INCLUDE include\libssock_t
%INCLUDE include\libio_pkt_t

--------------------------------------------------------------------------------
-- 
-- local types & constants
-- 
--------------------------------------------------------------------------------
TYPE
	rosio_cfg_t = STRUCTURE
		checked      : BOOLEAN  -- user flagged: config checked
		loop_hz      : INTEGER 
		s_tcp_nr     : INTEGER  -- TCP port to listen on
		s_tag_nr     : INTEGER  -- server TAG number to use
		um_clear     : BOOLEAN  -- clear user menu on start
	ENDSTRUCTURE


VAR
	cfg_		in SHADOW	: rosio_cfg_t   -- configuration
	pkt_				: io_pkt_t 
	sock_				: ssock_t
	sock_fd_			: FILE           -- file descriptor has to be declared here
	stat_				: INTEGER
	sleep_time_			: INTEGER
	shutdwn_req_			: BOOLEAN	-- program abort requested status
	send_st_			: BOOLEAN	--Sendedauer  IO_STREAM_SUB


CONST
	LOG_PFIX     = 'RRIO '

	COND_AH      =    1  -- ABORT handler id

	CFG_OK       =    0  -- config ok
	CFG_NOTDONE  =   -1  -- configuration not checked: user action required

	FILE_ILL_PRM =  2032 -- FILE-032 Illegal parameter
	HOST_CTAG_ER = 67144 -- HOST-144 Comm Tag error
	SEV_ABORT    =    2  -- ABORT severity

	MOVERR_OOR   =   -1  -- Requested JPOS is out-of-range
	
	CONN_CLOSED = 2021 -- IO_STATUS End of file for RAM disk device -> socket closed

	-- Configuration defaults
	IO_TAG   =    5  -- Server tag
	IO_TCP_P = RI_TCP_IO
	LOOP_HZ      =   40  -- Hz

--------------------------------------------------------------------------------
-- 
-- remote routine prototypes
-- 
--------------------------------------------------------------------------------
%INCLUDE include\libssock_h
%INCLUDE include\libind_log_h
%INCLUDE include\libio_pkt_h



--------------------------------------------------------------------------------
-- 
-- local routine prototypes
-- 
--------------------------------------------------------------------------------
ROUTINE check_cfg_(cfg : rosio_cfg_t) : INTEGER FROM ros_io
ROUTINE install_ah_ FROM ros_io
ROUTINE remove_ah_ FROM ros_io



--------------------------------------------------------------------------------
-- 
-- Main program
-- 
--------------------------------------------------------------------------------
BEGIN
	-- check config
	stat_ = check_cfg_(cfg_)
	IF (stat_ <> CFG_OK) THEN
		log_error_a(LOG_PFIX + 'cfg error:', stat_)
		log_error(LOG_PFIX + 'check cfg')
		-- errors with config always force user to log window
		log_force
		POST_ERR(FILE_ILL_PRM, '', 0, SEV_ABORT)
		RETURN
	ENDIF


	-- init
	stat_        = 0
	sleep_time_  = ROUND(1000.0 / cfg_.loop_hz)
	shutdwn_req_ = FALSE


	-- initialise ABORT handler
	install_ah_


	-- enable log output
	IF (cfg_.um_clear) THEN log_clear; ENDIF


	-- init server socket
	stat_ = ssock_ctor(sock_, cfg_.s_tcp_nr , cfg_.s_tag_nr)
	IF (stat_ <> 0) THEN
		IF (stat_ = TAG_CONF_ERR) THEN	-- Hier Fehler stat_ = TAG_CONF_ERR = -1
			log_error_a(LOG_PFIX + 'cfg err, TAG idx:', cfg_.s_tag_nr)
		ELSE
			log_error_a(LOG_PFIX + 'ssock_ctor err:', stat_)
		ENDIF
		-- nothing we can do, abort
		POST_ERR(HOST_CTAG_ER, '', 0, SEV_ABORT)
	ENDIF

	-- make sure socket is closed
	-- don t care about result
	stat_ = ssock_dconnf(sock_)


	-- 
	WHILE (NOT shutdwn_req_) DO

		-- inform user
		log_info(LOG_PFIX + 'Waiting for ROS IO')

		-- set socket in 'binary mode' (unformatted)
		-- KAREL Reference Manual, MARRC75KR07091E Rev C, sec 7.3.1
		SET_FILE_ATR(sock_fd_, ATR_UF)

		-- wait for connection
		stat_ = ssock_accpt2(sock_, sock_fd_)
		IF (stat_ <> 0) THEN
			log_error_a(LOG_PFIX + 'sock_accept err:', stat_)
			-- can't continue
			GOTO exit_discon
		ENDIF

		-- inform user
		log_info(LOG_PFIX + 'Connected')

		-- got client, start relay loop
		WHILE (NOT shutdwn_req_) DO
		
		-- TODO: Tim
		--Bedingung für das Streamen festlegen/bestimmen
		--conditionhandler
		
				
		stat_= ipktio_d_srl(sock_fd_)
		IF (stat_ < 0) THEN
			IF (stat_ = -CONN_CLOSED) THEN
				log_info(LOG_PFIX + 'Connection closed.')
			ELSE
				log_error_a(LOG_PFIX + ' ipkt_d/srlise ', stat_)
			ENDIF
			
			-- can't continue
			GOTO exit_discon
		ENDIF
		
		-- sleep a little (1/T)
		DELAY sleep_time_
		
		-- inner WHILE TRUE DO
		ENDWHILE

		-- exit with forced disconnect
exit_discon::
		stat_ = ssock_dconn2(sock_, sock_fd_)

	-- outer WHILE TRUE DO
	ENDWHILE


exit_on_err::
	-- nothing

	-- make sure socket is closed (don t care about result)
	stat_ = ssock_dconnf(sock_)

	-- disable the ABORT handler
	remove_ah_

	-- done
	log_info(LOG_PFIX + 'Exit')

END ros_io




ROUTINE check_cfg_
VAR
	a__ : BOOLEAN
BEGIN
	a__ = FALSE

	-- set defaults for any uninitialised entries
	IF (UNINIT(cfg.s_tcp_nr  )) THEN cfg.s_tcp_nr   = IO_TCP_P; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.s_tag_nr  )) THEN cfg.s_tag_nr   = IO_TAG  ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.um_clear  )) THEN cfg.um_clear   = TRUE        ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.loop_hz  )) THEN cfg.loop_hz    = LOOP_HZ     ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.checked   )) THEN cfg.checked    = FALSE       ; a__ = TRUE; ENDIF

	-- make sure user has checked configuration
	IF ((NOT cfg.checked) OR a__) THEN RETURN (CFG_NOTDONE); ENDIF

	-- all ok
	RETURN (CFG_OK)
END check_cfg_




--------------------------------------------------------------------------------
-- 
-- Application handler for ABORT signals.
-- 
--------------------------------------------------------------------------------
ROUTINE ab_hndlr_
BEGIN
	shutdwn_req_ = TRUE
	CANCEL FILE sock_fd_
END ab_hndlr_




--------------------------------------------------------------------------------
-- 
-- Installs a condition handler that catches ABORT signals to allow the
-- application to 'gracefully' exit.
-- 
--------------------------------------------------------------------------------
ROUTINE install_ah_
BEGIN
	CONDITION[COND_AH]: WITH $SCAN_TIME = 256
		WHEN ABORT DO
			NOABORT
			ab_hndlr_
	ENDCONDITION
	ENABLE CONDITION[COND_AH]
END install_ah_




--------------------------------------------------------------------------------
-- 
-- Deregisters the ABORT condition handler.
-- 
--------------------------------------------------------------------------------
ROUTINE remove_ah_
BEGIN
	PURGE CONDITION[COND_AH]
END remove_ah_
